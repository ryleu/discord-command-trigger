{
    "neofetch": {
        "description": "Run the `neofetch` command.",
        "steps": [
            "neofetch"
        ]
    },
    "ls": {
        "description": "List the working directory.",
        "steps": [
            "ls -alF --color=always"
        ]
    },
    "free": {
        "description": "Get the free memory in MiB",
        "steps": [
            "free -m"
        ]
    },
    "code": {
        "description": "Print the contents of the `main.py` file.",
        "steps": [
            "cat main.py"
        ],
        "format": "py"
    },
    "flows_json": {
        "description": "Print the contents of the `flows.json` file.",
        "steps": [
            "cat flows.json"
        ],
        "format": "json"
    },
    "flows": {
        "description": "Print the name and descriptions of all flows.",
        "steps": [
            "for flow in $(cat flows.json | jq -r 'keys|.[]')",
            "  do echo \"\u001b[1m$flow:\u001b[0m $(cat flows.json | jq -r \".$flow|.description?\")\"",
            "done"
        ]
    },
    "owners": {
        "description": "Display the owner(s) authorized to send commands.",
        "steps": [
            "for owner in $(cat config.json | jq '.owner_ids|.[]')",
            "  do echo \"<@$owner>\"",
            "done"
        ],
        "format": "discord"
    },
    "channels": {
        "description": "Display the channel(s) authorized to send commands in.",
        "steps": [
            "for channel in $(cat config.json | jq '.channel_ids|.[]')",
            "  do echo \"<#$channel>\"",
            "done"
        ],
        "format": "discord"
    }
}
